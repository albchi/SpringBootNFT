package com.example.demo;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DigitalArt extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f4469676974616c417274000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f504f454d00000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b613d4280620001dd6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f6ccce7116100c3578063a543a7171161007c578063a543a71714610400578063b88d4fde14610430578063c87b56dd1461044c578063d645ddf61461047c578063e985e9c5146104ac578063fa02c4b7146104dc5761014d565b80634f6ccce7146103065780636352211e1461033657806370a082311461036657806395d89b4114610396578063a00b5504146103b4578063a22cb465146103e45761014d565b806318160ddd1161011557806318160ddd1461021c57806319a444b71461023a57806323b872dd1461026a57806327266540146102865780632f745c59146102ba57806342842e0e146102ea5761014d565b806301ffc9a714610152578063025e7c271461018257806306fdde03146101b2578063081812fc146101d0578063095ea7b314610200575b600080fd5b61016c60048036038101906101679190612bd4565b6104f8565b604051610179919061358f565b60405180910390f35b61019c60048036038101906101979190612cbd565b61050a565b6040516101a99190613506565b60405180910390f35b6101ba610549565b6040516101c791906135aa565b60405180910390f35b6101ea60048036038101906101e59190612cbd565b6105db565b6040516101f79190613506565b60405180910390f35b61021a60048036038101906102159190612b98565b610660565b005b610224610778565b604051610231919061385b565b60405180910390f35b610254600480360381019061024f9190612a2d565b610785565b604051610261919061385b565b60405180910390f35b610284600480360381019061027f9190612a92565b61079d565b005b6102a0600480360381019061029b9190612cbd565b6107fd565b6040516102b19594939291906135cc565b60405180910390f35b6102d460048036038101906102cf9190612b98565b610a63565b6040516102e1919061385b565b60405180910390f35b61030460048036038101906102ff9190612a92565b610b08565b005b610320600480360381019061031b9190612cbd565b610b28565b60405161032d919061385b565b60405180910390f35b610350600480360381019061034b9190612cbd565b610bbf565b60405161035d9190613506565b60405180910390f35b610380600480360381019061037b9190612a2d565b610c71565b60405161038d919061385b565b60405180910390f35b61039e610d29565b6040516103ab91906135aa565b60405180910390f35b6103ce60048036038101906103c99190612ce6565b610dbb565b6040516103db9190613506565b60405180910390f35b6103fe60048036038101906103f99190612b5c565b610e09565b005b61041a60048036038101906104159190612cbd565b610f8a565b604051610427919061356d565b60405180910390f35b61044a60048036038101906104459190612ae1565b61102b565b005b61046660048036038101906104619190612cbd565b61108d565b60405161047391906135aa565b60405180910390f35b61049660048036038101906104919190612c26565b6111df565b6040516104a3919061385b565b60405180910390f35b6104c660048036038101906104c19190612a56565b61143e565b6040516104d3919061358f565b60405180910390f35b6104f660048036038101906104f19190612b98565b6114d2565b005b600061050382611555565b9050919050565b6010818154811061051a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000805461055890613af4565b80601f016020809104026020016040519081016040528092919081815260200182805461058490613af4565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b5050505050905090565b60006105e6826115cf565b610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061c9061379b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066b82610bbf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d3906137fb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106fb61163b565b73ffffffffffffffffffffffffffffffffffffffff16148061072a57506107298161072461163b565b61143e565b5b610769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610760906136fb565b60405180910390fd5b6107738383611643565b505050565b6000600880549050905090565b600d6020528060005260406000206000915090505481565b6107ae6107a861163b565b826116fc565b6107ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e49061381b565b60405180910390fd5b6107f88383836117da565b505050565b600f818154811061080d57600080fd5b906000526020600020906005020160009150905080600001805461083090613af4565b80601f016020809104026020016040519081016040528092919081815260200182805461085c90613af4565b80156108a95780601f1061087e576101008083540402835291602001916108a9565b820191906000526020600020905b81548152906001019060200180831161088c57829003601f168201915b5050505050908060010180546108be90613af4565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea90613af4565b80156109375780601f1061090c57610100808354040283529160200191610937565b820191906000526020600020905b81548152906001019060200180831161091a57829003601f168201915b50505050509080600201805461094c90613af4565b80601f016020809104026020016040519081016040528092919081815260200182805461097890613af4565b80156109c55780601f1061099a576101008083540402835291602001916109c5565b820191906000526020600020905b8154815290600101906020018083116109a857829003601f168201915b5050505050908060030154908060040180546109e090613af4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0c90613af4565b8015610a595780601f10610a2e57610100808354040283529160200191610a59565b820191906000526020600020905b815481529060010190602001808311610a3c57829003601f168201915b5050505050905085565b6000610a6e83610c71565b8210610aaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa69061363b565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610b238383836040518060200160405280600081525061102b565b505050565b6000610b32610778565b8210610b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6a9061383b565b60405180910390fd5b60088281548110610bad577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f9061373b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd99061371b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610d3890613af4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6490613af4565b8015610db15780601f10610d8657610100808354040283529160200191610db1565b820191906000526020600020905b815481529060010190602001808311610d9457829003601f168201915b5050505050905090565b600e6020528160005260406000208181548110610dd757600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e1161163b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e76906136bb565b60405180910390fd5b8060056000610e8c61163b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610f3961163b565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f7e919061358f565b60405180910390a35050565b6060600e600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561101f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610fd5575b50505050509050919050565b61103c61103661163b565b836116fc565b61107b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110729061381b565b60405180910390fd5b61108784848484611a36565b50505050565b6060611098826115cf565b6110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce9061377b565b60405180910390fd5b6000600c600084815260200190815260200160002080546110f790613af4565b80601f016020809104026020016040519081016040528092919081815260200182805461112390613af4565b80156111705780601f1061114557610100808354040283529160200191611170565b820191906000526020600020905b81548152906001019060200180831161115357829003601f168201915b505050505090506000611181611a92565b90506000815114156111975781925050506111da565b6000825111156111cc5780826040516020016111b49291906134e2565b604051602081830303815290604052925050506111da565b6111d584611aa9565b925050505b919050565b60006011846040516111f191906134cb565b908152602001604051809103902060009054906101000a900460ff161561121757600080fd5b611221600b611bfb565b9050600f6040518060a00160405280868152602001858152602001848152602001838152602001604051806080016040528060438152602001613cca60439139815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000190805190602001906112a9929190612851565b5060208201518160010190805190602001906112c6929190612851565b5060408201518160020190805190602001906112e3929190612851565b5060608201518160030155608082015181600401908051906020019061130a929190612851565b5050506113173382611c09565b601061132282610bbf565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e6000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160118560405161140891906134cb565b908152602001604051809103902060006101000a81548160ff021916908315150217905550611437600b611c27565b9392505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114dd338383610b08565b600e6000828152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806115c857506115c782611c3d565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166116b683610bbf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611707826115cf565b611746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173d906136db565b60405180910390fd5b600061175183610bbf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117c057508373ffffffffffffffffffffffffffffffffffffffff166117a8846105db565b73ffffffffffffffffffffffffffffffffffffffff16145b806117d157506117d0818561143e565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166117fa82610bbf565b73ffffffffffffffffffffffffffffffffffffffff1614611850576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611847906137bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b79061369b565b60405180910390fd5b6118cb838383611d1f565b6118d6600082611643565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119269190613a0a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461197d9190613983565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611a418484846117da565b611a4d84848484611d2f565b611a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a839061365b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611ab4826115cf565b611af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aea9061377b565b60405180910390fd5b6000600a60008481526020019081526020016000208054611b1390613af4565b80601f0160208091040260200160405190810160405280929190818152602001828054611b3f90613af4565b8015611b8c5780601f10611b6157610100808354040283529160200191611b8c565b820191906000526020600020905b815481529060010190602001808311611b6f57829003601f168201915b505050505090506000611b9d611a92565b9050600081511415611bb3578192505050611bf6565b600082511115611be8578082604051602001611bd09291906134e2565b60405160208183030381529060405292505050611bf6565b611bf184611ec6565b925050505b919050565b600081600001549050919050565b611c23828260405180602001604052806000815250611f6d565b5050565b6001816000016000828254019250508190555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611d0857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611d185750611d1782611fc8565b5b9050919050565b611d2a838383612032565b505050565b6000611d508473ffffffffffffffffffffffffffffffffffffffff16612146565b15611eb9578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611d7961163b565b8786866040518563ffffffff1660e01b8152600401611d9b9493929190613521565b602060405180830381600087803b158015611db557600080fd5b505af1925050508015611de657506040513d601f19601f82011682018060405250810190611de39190612bfd565b60015b611e69573d8060008114611e16576040519150601f19603f3d011682016040523d82523d6000602084013e611e1b565b606091505b50600081511415611e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e589061365b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611ebe565b600190505b949350505050565b6060611ed1826115cf565b611f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f07906137db565b60405180910390fd5b6000611f1a611a92565b90506000815111611f3a5760405180602001604052806000815250611f65565b80611f4484612159565b604051602001611f559291906134e2565b6040516020818303038152906040525b915050919050565b611f778383612306565b611f846000848484611d2f565b611fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fba9061365b565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61203d8383836124d4565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156120805761207b816124d9565b6120bf565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146120be576120bd8382612522565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612102576120fd8161268f565b612141565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121405761213f82826127d2565b5b5b505050565b600080823b905060008111915050919050565b606060008214156121a1576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612301565b600082905060005b600082146121d35780806121bc90613b26565b915050600a826121cc91906139d9565b91506121a9565b60008167ffffffffffffffff811115612215577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156122475781602001600182028036833780820191505090505b5090505b600085146122fa576001826122609190613a0a565b9150600a8561226f9190613b6f565b603061227b9190613983565b60f81b8183815181106122b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122f391906139d9565b945061224b565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236d9061375b565b60405180910390fd5b61237f816115cf565b156123bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b69061367b565b60405180910390fd5b6123cb60008383611d1f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461241b9190613983565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161252f84610c71565b6125399190613a0a565b905060006007600084815260200190815260200160002054905081811461261e576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506126a39190613a0a565b90506000600960008481526020019081526020016000205490506000600883815481106126f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110612741577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806127b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006127dd83610c71565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b82805461285d90613af4565b90600052602060002090601f01602090048101928261287f57600085556128c6565b82601f1061289857805160ff19168380011785556128c6565b828001600101855582156128c6579182015b828111156128c55782518255916020019190600101906128aa565b5b5090506128d391906128d7565b5090565b5b808211156128f05760008160009055506001016128d8565b5090565b6000612907612902846138a7565b613876565b90508281526020810184848401111561291f57600080fd5b61292a848285613ab2565b509392505050565b6000612945612940846138d7565b613876565b90508281526020810184848401111561295d57600080fd5b612968848285613ab2565b509392505050565b60008135905061297f81613c6d565b92915050565b60008135905061299481613c84565b92915050565b6000813590506129a981613c9b565b92915050565b6000815190506129be81613c9b565b92915050565b600082601f8301126129d557600080fd5b81356129e58482602086016128f4565b91505092915050565b600082601f8301126129ff57600080fd5b8135612a0f848260208601612932565b91505092915050565b600081359050612a2781613cb2565b92915050565b600060208284031215612a3f57600080fd5b6000612a4d84828501612970565b91505092915050565b60008060408385031215612a6957600080fd5b6000612a7785828601612970565b9250506020612a8885828601612970565b9150509250929050565b600080600060608486031215612aa757600080fd5b6000612ab586828701612970565b9350506020612ac686828701612970565b9250506040612ad786828701612a18565b9150509250925092565b60008060008060808587031215612af757600080fd5b6000612b0587828801612970565b9450506020612b1687828801612970565b9350506040612b2787828801612a18565b925050606085013567ffffffffffffffff811115612b4457600080fd5b612b50878288016129c4565b91505092959194509250565b60008060408385031215612b6f57600080fd5b6000612b7d85828601612970565b9250506020612b8e85828601612985565b9150509250929050565b60008060408385031215612bab57600080fd5b6000612bb985828601612970565b9250506020612bca85828601612a18565b9150509250929050565b600060208284031215612be657600080fd5b6000612bf48482850161299a565b91505092915050565b600060208284031215612c0f57600080fd5b6000612c1d848285016129af565b91505092915050565b600080600060608486031215612c3b57600080fd5b600084013567ffffffffffffffff811115612c5557600080fd5b612c61868287016129ee565b935050602084013567ffffffffffffffff811115612c7e57600080fd5b612c8a868287016129ee565b925050604084013567ffffffffffffffff811115612ca757600080fd5b612cb3868287016129ee565b9150509250925092565b600060208284031215612ccf57600080fd5b6000612cdd84828501612a18565b91505092915050565b60008060408385031215612cf957600080fd5b6000612d0785828601612a18565b9250506020612d1885828601612a18565b9150509250929050565b6000612d2e8383612d3a565b60208301905092915050565b612d4381613a3e565b82525050565b612d5281613a3e565b82525050565b6000612d6382613917565b612d6d8185613945565b9350612d7883613907565b8060005b83811015612da9578151612d908882612d22565b9750612d9b83613938565b925050600181019050612d7c565b5085935050505092915050565b612dbf81613a50565b82525050565b6000612dd082613922565b612dda8185613956565b9350612dea818560208601613ac1565b612df381613c5c565b840191505092915050565b6000612e098261392d565b612e138185613967565b9350612e23818560208601613ac1565b612e2c81613c5c565b840191505092915050565b6000612e428261392d565b612e4c8185613978565b9350612e5c818560208601613ac1565b80840191505092915050565b6000612e75602b83613967565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b6000612edb603283613967565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000612f41601c83613967565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000612f81602483613967565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612fe7601983613967565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b6000613027602c83613967565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b600061308d603883613967565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b60006130f3602a83613967565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000613159602983613967565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b60006131bf602083613967565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b60006131ff603183613967565b91507f45524337323155524953746f726167653a2055524920717565727920666f722060008301527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006020830152604082019050919050565b6000613265602c83613967565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006132cb602983613967565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613331602f83613967565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613397602183613967565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006133fd603183613967565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613463602c83613967565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b6134c581613aa8565b82525050565b60006134d78284612e37565b915081905092915050565b60006134ee8285612e37565b91506134fa8284612e37565b91508190509392505050565b600060208201905061351b6000830184612d49565b92915050565b60006080820190506135366000830187612d49565b6135436020830186612d49565b61355060408301856134bc565b81810360608301526135628184612dc5565b905095945050505050565b600060208201905081810360008301526135878184612d58565b905092915050565b60006020820190506135a46000830184612db6565b92915050565b600060208201905081810360008301526135c48184612dfe565b905092915050565b600060a08201905081810360008301526135e68188612dfe565b905081810360208301526135fa8187612dfe565b9050818103604083015261360e8186612dfe565b905061361d60608301856134bc565b818103608083015261362f8184612dfe565b90509695505050505050565b6000602082019050818103600083015261365481612e68565b9050919050565b6000602082019050818103600083015261367481612ece565b9050919050565b6000602082019050818103600083015261369481612f34565b9050919050565b600060208201905081810360008301526136b481612f74565b9050919050565b600060208201905081810360008301526136d481612fda565b9050919050565b600060208201905081810360008301526136f48161301a565b9050919050565b6000602082019050818103600083015261371481613080565b9050919050565b60006020820190508181036000830152613734816130e6565b9050919050565b600060208201905081810360008301526137548161314c565b9050919050565b60006020820190508181036000830152613774816131b2565b9050919050565b60006020820190508181036000830152613794816131f2565b9050919050565b600060208201905081810360008301526137b481613258565b9050919050565b600060208201905081810360008301526137d4816132be565b9050919050565b600060208201905081810360008301526137f481613324565b9050919050565b600060208201905081810360008301526138148161338a565b9050919050565b60006020820190508181036000830152613834816133f0565b9050919050565b6000602082019050818103600083015261385481613456565b9050919050565b600060208201905061387060008301846134bc565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561389d5761389c613c2d565b5b8060405250919050565b600067ffffffffffffffff8211156138c2576138c1613c2d565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156138f2576138f1613c2d565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061398e82613aa8565b915061399983613aa8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139ce576139cd613ba0565b5b828201905092915050565b60006139e482613aa8565b91506139ef83613aa8565b9250826139ff576139fe613bcf565b5b828204905092915050565b6000613a1582613aa8565b9150613a2083613aa8565b925082821015613a3357613a32613ba0565b5b828203905092915050565b6000613a4982613a88565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613adf578082015181840152602081019050613ac4565b83811115613aee576000848401525b50505050565b60006002820490506001821680613b0c57607f821691505b60208210811415613b2057613b1f613bfe565b5b50919050565b6000613b3182613aa8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b6457613b63613ba0565b5b600182019050919050565b6000613b7a82613aa8565b9150613b8583613aa8565b925082613b9557613b94613bcf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b613c7681613a3e565b8114613c8157600080fd5b50565b613c8d81613a50565b8114613c9857600080fd5b50565b613ca481613a5c565b8114613caf57600080fd5b50565b613cbb81613aa8565b8114613cc657600080fd5b5056fe68747470733a2f2f697066732e696f2f697066732f516d616d744a4c6e6644597a66424c6e545975686e7836676342515233723235623631456a367a434c3754444a4ea2646970667358221220f1ba96de630fd63c151626b6a9532d07b21c1496f68292c449377d7e6b78d59264736f6c63430008000033";

    public static final String FUNC_DIGITALARTARR = "DigitalArtArr";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_OWNERS = "owners";

    public static final String FUNC_OWNERSMAP = "ownersMap";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENSMAP = "tokensMap";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_GETOWNERTOKEN = "getOwnerToken";

    public static final String FUNC_APPROVETRANSFER = "approveTransfer";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DigitalArt(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DigitalArt(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DigitalArt(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DigitalArt(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, BigInteger, String>> DigitalArtArr(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DIGITALARTARR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, BigInteger, String>>(function,
                new Callable<Tuple5<String, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple5<String, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, BigInteger, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owners(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> ownersMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERSMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokensMap(BigInteger param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENSMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String title, String text, String artistName) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title), 
                new org.web3j.abi.datatypes.Utf8String(text), 
                new org.web3j.abi.datatypes.Utf8String(artistName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getOwnerToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNERTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> approveTransfer(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVETRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DigitalArt load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DigitalArt(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DigitalArt load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DigitalArt(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DigitalArt load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DigitalArt(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DigitalArt load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DigitalArt(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DigitalArt> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DigitalArt.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DigitalArt> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DigitalArt.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DigitalArt> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DigitalArt.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DigitalArt> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DigitalArt.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
