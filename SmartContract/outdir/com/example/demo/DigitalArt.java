package com.example.demo;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class DigitalArt extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f4469676974616c417274000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f504f454d00000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b613ace80620001dd6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80634f6ccce7116100c3578063a543a7171161007c578063a543a717146103ff578063b88d4fde1461042f578063c87b56dd1461044b578063d645ddf61461047b578063e985e9c5146104ab578063fa02c4b7146104db5761014d565b80634f6ccce7146103055780636352211e1461033557806370a082311461036557806395d89b4114610395578063a00b5504146103b3578063a22cb465146103e35761014d565b806318160ddd1161011557806318160ddd1461021c57806319a444b71461023a57806323b872dd1461026a57806327266540146102865780632f745c59146102b957806342842e0e146102e95761014d565b806301ffc9a714610152578063025e7c271461018257806306fdde03146101b2578063081812fc146101d0578063095ea7b314610200575b600080fd5b61016c600480360381019061016791906129b8565b6104f7565b6040516101799190613373565b60405180910390f35b61019c60048036038101906101979190612aa1565b610509565b6040516101a991906132ea565b60405180910390f35b6101ba610548565b6040516101c7919061338e565b60405180910390f35b6101ea60048036038101906101e59190612aa1565b6105da565b6040516101f791906132ea565b60405180910390f35b61021a6004803603810190610215919061297c565b61065f565b005b610224610777565b604051610231919061362a565b60405180910390f35b610254600480360381019061024f9190612811565b610784565b604051610261919061362a565b60405180910390f35b610284600480360381019061027f9190612876565b61079c565b005b6102a0600480360381019061029b9190612aa1565b6107fc565b6040516102b094939291906133b0565b60405180910390f35b6102d360048036038101906102ce919061297c565b6109d4565b6040516102e0919061362a565b60405180910390f35b61030360048036038101906102fe9190612876565b610a79565b005b61031f600480360381019061031a9190612aa1565b610a99565b60405161032c919061362a565b60405180910390f35b61034f600480360381019061034a9190612aa1565b610b30565b60405161035c91906132ea565b60405180910390f35b61037f600480360381019061037a9190612811565b610be2565b60405161038c919061362a565b60405180910390f35b61039d610c9a565b6040516103aa919061338e565b60405180910390f35b6103cd60048036038101906103c89190612aca565b610d2c565b6040516103da91906132ea565b60405180910390f35b6103fd60048036038101906103f89190612940565b610d7a565b005b61041960048036038101906104149190612aa1565b610efb565b6040516104269190613351565b60405180910390f35b610449600480360381019061044491906128c5565b610f9c565b005b61046560048036038101906104609190612aa1565b610ffe565b604051610472919061338e565b60405180910390f35b61049560048036038101906104909190612a0a565b611150565b6040516104a2919061362a565b60405180910390f35b6104c560048036038101906104c0919061283a565b6112c5565b6040516104d29190613373565b60405180910390f35b6104f560048036038101906104f0919061297c565b611359565b005b6000610502826113dc565b9050919050565b6010818154811061051957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054610557906138c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610583906138c3565b80156105d05780601f106105a5576101008083540402835291602001916105d0565b820191906000526020600020905b8154815290600101906020018083116105b357829003601f168201915b5050505050905090565b60006105e582611456565b610624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061b9061356a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066a82610b30565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d2906135ca565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106fa6114c2565b73ffffffffffffffffffffffffffffffffffffffff1614806107295750610728816107236114c2565b6112c5565b5b610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075f906134ca565b60405180910390fd5b61077283836114ca565b505050565b6000600880549050905090565b600d6020528060005260406000206000915090505481565b6107ad6107a76114c2565b82611583565b6107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e3906135ea565b60405180910390fd5b6107f7838383611661565b505050565b600f818154811061080c57600080fd5b906000526020600020906004020160009150905080600001805461082f906138c3565b80601f016020809104026020016040519081016040528092919081815260200182805461085b906138c3565b80156108a85780601f1061087d576101008083540402835291602001916108a8565b820191906000526020600020905b81548152906001019060200180831161088b57829003601f168201915b5050505050908060010180546108bd906138c3565b80601f01602080910402602001604051908101604052809291908181526020018280546108e9906138c3565b80156109365780601f1061090b57610100808354040283529160200191610936565b820191906000526020600020905b81548152906001019060200180831161091957829003601f168201915b50505050509080600201805461094b906138c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610977906138c3565b80156109c45780601f10610999576101008083540402835291602001916109c4565b820191906000526020600020905b8154815290600101906020018083116109a757829003601f168201915b5050505050908060030154905084565b60006109df83610be2565b8210610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a179061340a565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610a9483838360405180602001604052806000815250610f9c565b505050565b6000610aa3610777565b8210610ae4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adb9061360a565b60405180910390fd5b60088281548110610b1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd09061350a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4a906134ea565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610ca9906138c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd5906138c3565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b5050505050905090565b600e6020528160005260406000208181548110610d4857600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d826114c2565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de79061348a565b60405180910390fd5b8060056000610dfd6114c2565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610eaa6114c2565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610eef9190613373565b60405180910390a35050565b6060600e6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f9057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f46575b50505050509050919050565b610fad610fa76114c2565b83611583565b610fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe3906135ea565b60405180910390fd5b610ff8848484846118bd565b50505050565b606061100982611456565b611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f9061354a565b60405180910390fd5b6000600c60008481526020019081526020016000208054611068906138c3565b80601f0160208091040260200160405190810160405280929190818152602001828054611094906138c3565b80156110e15780601f106110b6576101008083540402835291602001916110e1565b820191906000526020600020905b8154815290600101906020018083116110c457829003601f168201915b5050505050905060006110f2611919565b905060008151141561110857819250505061114b565b60008251111561113d5780826040516020016111259291906132c6565b6040516020818303038152906040529250505061114b565b61114684611930565b925050505b919050565b600060118460405161116291906132af565b908152602001604051809103902060009054906101000a900460ff161561118857600080fd5b611192600b611a82565b905061119e3382611a90565b60106111a982610b30565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e6000828152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160118560405161128f91906132af565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506112be600b611aae565b9392505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611364338383610a79565b600e6000828152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061144f575061144e82611ac4565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661153d83610b30565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061158e82611456565b6115cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c4906134aa565b60405180910390fd5b60006115d883610b30565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061164757508373ffffffffffffffffffffffffffffffffffffffff1661162f846105da565b73ffffffffffffffffffffffffffffffffffffffff16145b80611658575061165781856112c5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661168182610b30565b73ffffffffffffffffffffffffffffffffffffffff16146116d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ce9061358a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173e9061346a565b60405180910390fd5b611752838383611ba6565b61175d6000826114ca565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117ad91906137d9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118049190613752565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6118c8848484611661565b6118d484848484611bb6565b611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a9061342a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061193b82611456565b61197a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119719061354a565b60405180910390fd5b6000600a6000848152602001908152602001600020805461199a906138c3565b80601f01602080910402602001604051908101604052809291908181526020018280546119c6906138c3565b8015611a135780601f106119e857610100808354040283529160200191611a13565b820191906000526020600020905b8154815290600101906020018083116119f657829003601f168201915b505050505090506000611a24611919565b9050600081511415611a3a578192505050611a7d565b600082511115611a6f578082604051602001611a579291906132c6565b60405160208183030381529060405292505050611a7d565b611a7884611d4d565b925050505b919050565b600081600001549050919050565b611aaa828260405180602001604052806000815250611df4565b5050565b6001816000016000828254019250508190555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611b8f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611b9f5750611b9e82611e4f565b5b9050919050565b611bb1838383611eb9565b505050565b6000611bd78473ffffffffffffffffffffffffffffffffffffffff16611fcd565b15611d40578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611c006114c2565b8786866040518563ffffffff1660e01b8152600401611c229493929190613305565b602060405180830381600087803b158015611c3c57600080fd5b505af1925050508015611c6d57506040513d601f19601f82011682018060405250810190611c6a91906129e1565b60015b611cf0573d8060008114611c9d576040519150601f19603f3d011682016040523d82523d6000602084013e611ca2565b606091505b50600081511415611ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdf9061342a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d45565b600190505b949350505050565b6060611d5882611456565b611d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8e906135aa565b60405180910390fd5b6000611da1611919565b90506000815111611dc15760405180602001604052806000815250611dec565b80611dcb84611fe0565b604051602001611ddc9291906132c6565b6040516020818303038152906040525b915050919050565b611dfe838361218d565b611e0b6000848484611bb6565b611e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e419061342a565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611ec483838361235b565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f0757611f0281612360565b611f46565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611f4557611f4483826123a9565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f8957611f8481612516565b611fc8565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611fc757611fc68282612659565b5b5b505050565b600080823b905060008111915050919050565b60606000821415612028576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612188565b600082905060005b6000821461205a578080612043906138f5565b915050600a8261205391906137a8565b9150612030565b60008167ffffffffffffffff81111561209c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120ce5781602001600182028036833780820191505090505b5090505b60008514612181576001826120e791906137d9565b9150600a856120f6919061393e565b60306121029190613752565b60f81b81838151811061213e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561217a91906137a8565b94506120d2565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f49061352a565b60405180910390fd5b61220681611456565b15612246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223d9061344a565b60405180910390fd5b61225260008383611ba6565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122a29190613752565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016123b684610be2565b6123c091906137d9565b90506000600760008481526020019081526020016000205490508181146124a5576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061252a91906137d9565b9050600060096000848152602001908152602001600020549050600060088381548110612580577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106125c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548061263d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061266483610be2565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60006126eb6126e684613676565b613645565b90508281526020810184848401111561270357600080fd5b61270e848285613881565b509392505050565b6000612729612724846136a6565b613645565b90508281526020810184848401111561274157600080fd5b61274c848285613881565b509392505050565b60008135905061276381613a3c565b92915050565b60008135905061277881613a53565b92915050565b60008135905061278d81613a6a565b92915050565b6000815190506127a281613a6a565b92915050565b600082601f8301126127b957600080fd5b81356127c98482602086016126d8565b91505092915050565b600082601f8301126127e357600080fd5b81356127f3848260208601612716565b91505092915050565b60008135905061280b81613a81565b92915050565b60006020828403121561282357600080fd5b600061283184828501612754565b91505092915050565b6000806040838503121561284d57600080fd5b600061285b85828601612754565b925050602061286c85828601612754565b9150509250929050565b60008060006060848603121561288b57600080fd5b600061289986828701612754565b93505060206128aa86828701612754565b92505060406128bb868287016127fc565b9150509250925092565b600080600080608085870312156128db57600080fd5b60006128e987828801612754565b94505060206128fa87828801612754565b935050604061290b878288016127fc565b925050606085013567ffffffffffffffff81111561292857600080fd5b612934878288016127a8565b91505092959194509250565b6000806040838503121561295357600080fd5b600061296185828601612754565b925050602061297285828601612769565b9150509250929050565b6000806040838503121561298f57600080fd5b600061299d85828601612754565b92505060206129ae858286016127fc565b9150509250929050565b6000602082840312156129ca57600080fd5b60006129d88482850161277e565b91505092915050565b6000602082840312156129f357600080fd5b6000612a0184828501612793565b91505092915050565b600080600060608486031215612a1f57600080fd5b600084013567ffffffffffffffff811115612a3957600080fd5b612a45868287016127d2565b935050602084013567ffffffffffffffff811115612a6257600080fd5b612a6e868287016127d2565b925050604084013567ffffffffffffffff811115612a8b57600080fd5b612a97868287016127d2565b9150509250925092565b600060208284031215612ab357600080fd5b6000612ac1848285016127fc565b91505092915050565b60008060408385031215612add57600080fd5b6000612aeb858286016127fc565b9250506020612afc858286016127fc565b9150509250929050565b6000612b128383612b1e565b60208301905092915050565b612b278161380d565b82525050565b612b368161380d565b82525050565b6000612b47826136e6565b612b518185613714565b9350612b5c836136d6565b8060005b83811015612b8d578151612b748882612b06565b9750612b7f83613707565b925050600181019050612b60565b5085935050505092915050565b612ba38161381f565b82525050565b6000612bb4826136f1565b612bbe8185613725565b9350612bce818560208601613890565b612bd781613a2b565b840191505092915050565b6000612bed826136fc565b612bf78185613736565b9350612c07818560208601613890565b612c1081613a2b565b840191505092915050565b6000612c26826136fc565b612c308185613747565b9350612c40818560208601613890565b80840191505092915050565b6000612c59602b83613736565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b6000612cbf603283613736565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b6000612d25601c83613736565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000612d65602483613736565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612dcb601983613736565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b6000612e0b602c83613736565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000612e71603883613736565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000612ed7602a83613736565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f3d602983613736565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000612fa3602083613736565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000612fe3603183613736565b91507f45524337323155524953746f726167653a2055524920717565727920666f722060008301527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006020830152604082019050919050565b6000613049602c83613736565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006130af602983613736565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613115602f83613736565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b600061317b602183613736565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006131e1603183613736565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613247602c83613736565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b6132a981613877565b82525050565b60006132bb8284612c1b565b915081905092915050565b60006132d28285612c1b565b91506132de8284612c1b565b91508190509392505050565b60006020820190506132ff6000830184612b2d565b92915050565b600060808201905061331a6000830187612b2d565b6133276020830186612b2d565b61333460408301856132a0565b81810360608301526133468184612ba9565b905095945050505050565b6000602082019050818103600083015261336b8184612b3c565b905092915050565b60006020820190506133886000830184612b9a565b92915050565b600060208201905081810360008301526133a88184612be2565b905092915050565b600060808201905081810360008301526133ca8187612be2565b905081810360208301526133de8186612be2565b905081810360408301526133f28185612be2565b905061340160608301846132a0565b95945050505050565b6000602082019050818103600083015261342381612c4c565b9050919050565b6000602082019050818103600083015261344381612cb2565b9050919050565b6000602082019050818103600083015261346381612d18565b9050919050565b6000602082019050818103600083015261348381612d58565b9050919050565b600060208201905081810360008301526134a381612dbe565b9050919050565b600060208201905081810360008301526134c381612dfe565b9050919050565b600060208201905081810360008301526134e381612e64565b9050919050565b6000602082019050818103600083015261350381612eca565b9050919050565b6000602082019050818103600083015261352381612f30565b9050919050565b6000602082019050818103600083015261354381612f96565b9050919050565b6000602082019050818103600083015261356381612fd6565b9050919050565b600060208201905081810360008301526135838161303c565b9050919050565b600060208201905081810360008301526135a3816130a2565b9050919050565b600060208201905081810360008301526135c381613108565b9050919050565b600060208201905081810360008301526135e38161316e565b9050919050565b60006020820190508181036000830152613603816131d4565b9050919050565b600060208201905081810360008301526136238161323a565b9050919050565b600060208201905061363f60008301846132a0565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561366c5761366b6139fc565b5b8060405250919050565b600067ffffffffffffffff821115613691576136906139fc565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156136c1576136c06139fc565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061375d82613877565b915061376883613877565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561379d5761379c61396f565b5b828201905092915050565b60006137b382613877565b91506137be83613877565b9250826137ce576137cd61399e565b5b828204905092915050565b60006137e482613877565b91506137ef83613877565b9250828210156138025761380161396f565b5b828203905092915050565b600061381882613857565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156138ae578082015181840152602081019050613893565b838111156138bd576000848401525b50505050565b600060028204905060018216806138db57607f821691505b602082108114156138ef576138ee6139cd565b5b50919050565b600061390082613877565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156139335761393261396f565b5b600182019050919050565b600061394982613877565b915061395483613877565b9250826139645761396361399e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b613a458161380d565b8114613a5057600080fd5b50565b613a5c8161381f565b8114613a6757600080fd5b50565b613a738161382b565b8114613a7e57600080fd5b50565b613a8a81613877565b8114613a9557600080fd5b5056fea26469706673582212201e3b72e5da7874ef23dcb49391a7787be0a46e2d37679459660756dd6a89f8c964736f6c63430008000033";

    public static final String FUNC_DIGITALARTARR = "DigitalArtArr";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_OWNERS = "owners";

    public static final String FUNC_OWNERSMAP = "ownersMap";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENSMAP = "tokensMap";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_GETOWNERTOKEN = "getOwnerToken";

    public static final String FUNC_APPROVETRANSFER = "approveTransfer";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected DigitalArt(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DigitalArt(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DigitalArt(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DigitalArt(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple4<String, String, String, BigInteger>> DigitalArtArr(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DIGITALARTARR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, BigInteger>>(function,
                new Callable<Tuple4<String, String, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owners(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> ownersMap(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERSMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokensMap(BigInteger param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENSMAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String title, String text, String artistName) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(title), 
                new org.web3j.abi.datatypes.Utf8String(text), 
                new org.web3j.abi.datatypes.Utf8String(artistName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getOwnerToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNERTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> approveTransfer(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVETRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DigitalArt load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DigitalArt(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DigitalArt load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DigitalArt(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DigitalArt load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DigitalArt(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DigitalArt load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DigitalArt(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DigitalArt> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DigitalArt.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<DigitalArt> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DigitalArt.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DigitalArt> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DigitalArt.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<DigitalArt> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DigitalArt.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
